{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chanjo2 documentation pages Chanjo2 is coverage analysis tool for clinical sequencing data using the d4 (Dense Depth Data Dump) format . It's implemented in Python FastAPI and provides API endpoints to communicate with a d4tools software in order to return coverage and coverage completeness over genomic intervals (genes, transcripts, exons as well as custom intervals) over single d4 files or samples stored in the database with associated d4 files. The tool is flexible and can be used in different ways. The simplest use case would be calculating sequencing coverage over one or more intervals for a d4 file stored locally or remotely on the internet. Chanjo2 image as a proxy to d4tools to compute coverage stats over genomic intervals of a d4 file Chanjo2 image contains d4tools and can be used to directly retrieve statistics over d4 files. Executing d4tools docker run --entrypoint d4tools --rm clinicalgenomics/chanjo2:latest Calculating coverage on specific genomic intervals of a d4 file using d4tools docker run --entrypoint d4tools --platform linux/x86_64 --rm -v <path-to-local-d4-files-folder>:/home/worker/infiles clinicalgenomics/chanjo2:latest view /home/worker/infiles/<d4file.d4> 1:1234560-1234580 X:1234560-1234580 Please note that the d4 file containing the coverage data can be also stored on a remote server . In this case the command above could be replaced by this one: docker run --entrypoint d4tools --platform linux/x86_64 --rm clinicalgenomics/chanjo2:latest view <url-to-remote-d4-file.d4> 1:1234560-1234580 X:1234560-1234580 The coverage computation on a file hosted on a remote server, will be consistently slower than when hosting the file on a local server. Chanjo2 as a REST server When chanjo2 is launched and runs as a REST server, it is offering many additional features, including: Support for calculating coverage and coverage completeness over genes, transcripts and exons for different genome builds Chanjo2 server can be either installed on a virtual environment using poetry of directly launched using Docker Instructions on how to set up and run Chanjo2 as a REST server as well as the functionalities that it offers are better illustrated in these dedicated pages.","title":"Index"},{"location":"#chanjo2-documentation-pages","text":"Chanjo2 is coverage analysis tool for clinical sequencing data using the d4 (Dense Depth Data Dump) format . It's implemented in Python FastAPI and provides API endpoints to communicate with a d4tools software in order to return coverage and coverage completeness over genomic intervals (genes, transcripts, exons as well as custom intervals) over single d4 files or samples stored in the database with associated d4 files. The tool is flexible and can be used in different ways. The simplest use case would be calculating sequencing coverage over one or more intervals for a d4 file stored locally or remotely on the internet.","title":"Chanjo2 documentation pages"},{"location":"#chanjo2-image-as-a-proxy-to-d4tools-to-compute-coverage-stats-over-genomic-intervals-of-a-d4-file","text":"Chanjo2 image contains d4tools and can be used to directly retrieve statistics over d4 files.","title":"Chanjo2 image as a proxy to d4tools to compute coverage stats over genomic intervals of a d4 file"},{"location":"#executing-d4tools","text":"docker run --entrypoint d4tools --rm clinicalgenomics/chanjo2:latest","title":"Executing d4tools"},{"location":"#calculating-coverage-on-specific-genomic-intervals-of-a-d4-file-using-d4tools","text":"docker run --entrypoint d4tools --platform linux/x86_64 --rm -v <path-to-local-d4-files-folder>:/home/worker/infiles clinicalgenomics/chanjo2:latest view /home/worker/infiles/<d4file.d4> 1:1234560-1234580 X:1234560-1234580 Please note that the d4 file containing the coverage data can be also stored on a remote server . In this case the command above could be replaced by this one: docker run --entrypoint d4tools --platform linux/x86_64 --rm clinicalgenomics/chanjo2:latest view <url-to-remote-d4-file.d4> 1:1234560-1234580 X:1234560-1234580 The coverage computation on a file hosted on a remote server, will be consistently slower than when hosting the file on a local server.","title":"Calculating coverage on specific genomic intervals of a d4 file using d4tools"},{"location":"#chanjo2-as-a-rest-server","text":"When chanjo2 is launched and runs as a REST server, it is offering many additional features, including: Support for calculating coverage and coverage completeness over genes, transcripts and exons for different genome builds Chanjo2 server can be either installed on a virtual environment using poetry of directly launched using Docker Instructions on how to set up and run Chanjo2 as a REST server as well as the functionalities that it offers are better illustrated in these dedicated pages.","title":"Chanjo2 as a REST server"},{"location":"deployment/docker-deployment/","text":"Deploying Chanjo2 using Docker The Dockerfile provided in the chanjo2 repository can be built and runned to deploy the software. Alternatively an image containing chanjo2 and all its dependencies is hosted on Docker Hub . Launching a demo using Docker The file named Dockerfile is a generic Docker file to run the application. Whenever the app is launched with the ENV param DEMO (check the settings present in file docker-compose.yml ) it will create a test SQLite database to work with. To start the demo via docker, run: docker run -d --rm -p 8000:8000 --expose 8000 clinicalgenomics/chanjo2:latest The endpoints of the app will be now reachable from any web browser: http://0.0.0.0:8000/docs or http://localhost:8000/docs Launching the app connected to a MySQL database via docker-compose An example of this setup is provided in the docker-compose-mysql.yml file. Here we connect the app to a MySQL (MariaDB) and provide the connection settings to use it. Note that a file containing environmnent variables is required to run this setup. The template.env file offers an example of the required variables and can be customised according to your local settings. To check the configuration (env variables passed to the docker-compose file) run: docker-compose -f docker-compose-mysql.yml --env-file template.env config The docker-compose file contains 2 services: - MariaDB database , runned from a Docker file that includes the script to create an empty testdb database - The chanjo2 web app , a REST API To start the demo, run: docker-compose -f docker-compose-mysql.yml --env-file template.env up The endpoints of the app will be now reachable from any web browser: http://0.0.0.0:8000/docs or http://localhost:8000/docs Production settings and .env file Keep in mind that Chanjo2 reads the variables necessary for connecting to the database from a default .env file . If you run a dockerized version of Chanjo2 and want to connect to a real database, you'll need to replace the default .env file with a custom environment file containing the correct settings to connect to your MySQL database. The last line present on the .env file ( DEMO=Y ) should be removed or commented out. Given a local database running on localhost and port 3306, a custom .env file like this: MYSQL_USER=dbUser MYSQL_PASSWORD=dbPassword MYSQL_DATABASE_NAME=chanjo2_test MYSQL_HOST_NAME=host.docker.internal MYSQL_PORT=3306 Should suffice to override the parameters present in the default .env file of Chanjo2: docker run -d --rm -v $(pwd)/.env:/home/worker/app/.env -p 8000:8000 --expose 8000 clinicalgenomics/chanjo2:latest","title":"Deployment using Docker"},{"location":"deployment/docker-deployment/#deploying-chanjo2-using-docker","text":"The Dockerfile provided in the chanjo2 repository can be built and runned to deploy the software. Alternatively an image containing chanjo2 and all its dependencies is hosted on Docker Hub .","title":"Deploying Chanjo2 using Docker"},{"location":"deployment/docker-deployment/#launching-a-demo-using-docker","text":"The file named Dockerfile is a generic Docker file to run the application. Whenever the app is launched with the ENV param DEMO (check the settings present in file docker-compose.yml ) it will create a test SQLite database to work with. To start the demo via docker, run: docker run -d --rm -p 8000:8000 --expose 8000 clinicalgenomics/chanjo2:latest The endpoints of the app will be now reachable from any web browser: http://0.0.0.0:8000/docs or http://localhost:8000/docs","title":"Launching a demo using Docker"},{"location":"deployment/docker-deployment/#launching-the-app-connected-to-a-mysql-database-via-docker-compose","text":"An example of this setup is provided in the docker-compose-mysql.yml file. Here we connect the app to a MySQL (MariaDB) and provide the connection settings to use it. Note that a file containing environmnent variables is required to run this setup. The template.env file offers an example of the required variables and can be customised according to your local settings. To check the configuration (env variables passed to the docker-compose file) run: docker-compose -f docker-compose-mysql.yml --env-file template.env config The docker-compose file contains 2 services: - MariaDB database , runned from a Docker file that includes the script to create an empty testdb database - The chanjo2 web app , a REST API To start the demo, run: docker-compose -f docker-compose-mysql.yml --env-file template.env up The endpoints of the app will be now reachable from any web browser: http://0.0.0.0:8000/docs or http://localhost:8000/docs","title":"Launching the app connected to a MySQL database via docker-compose"},{"location":"deployment/docker-deployment/#production-settings-and-env-file","text":"Keep in mind that Chanjo2 reads the variables necessary for connecting to the database from a default .env file . If you run a dockerized version of Chanjo2 and want to connect to a real database, you'll need to replace the default .env file with a custom environment file containing the correct settings to connect to your MySQL database. The last line present on the .env file ( DEMO=Y ) should be removed or commented out. Given a local database running on localhost and port 3306, a custom .env file like this: MYSQL_USER=dbUser MYSQL_PASSWORD=dbPassword MYSQL_DATABASE_NAME=chanjo2_test MYSQL_HOST_NAME=host.docker.internal MYSQL_PORT=3306 Should suffice to override the parameters present in the default .env file of Chanjo2: docker run -d --rm -v $(pwd)/.env:/home/worker/app/.env -p 8000:8000 --expose 8000 clinicalgenomics/chanjo2:latest","title":"Production settings and .env file"},{"location":"deployment/env_file/","text":"Custom settings and the .env file The demo server is connecting to a SQLite database whose temporary tables are destroyed and re-created every time the server is started. In order to connect to a permanent MYSQL database instance, you'd need to customise the settings present on the .env file. Database settings MYSQL_USER=dbUser MYSQL_PASSWORD=dbPassword MYSQL_DATABASE_NAME=chanjo2_test MYSQL_HOST_NAME=localhost MYSQL_PORT=3306 Customising the coverage levels used to create coverage reports and genes overview reports When generating coverage and genes overview reports, the metrics showcased in these documents are calculated across various coverage levels, such as 10x, 20x, and 50x. These specific coverage levels can be directly specified in queries to the /report and /overview endpoints using the completeness_thresholds parameter , which accepts a list of integers. For detailed instructions, please refer to the coverage-reports documentation . Alternatively, you can define these coverage levels in the .env file by adding the following line: REPORT_COVERAGE_LEVELS=[100,150,,..] If the REPORT_COVERAGE_LEVELS parameter is not present in the .env file and a request does not include a completeness_thresholds value, the report metrics will default to the following coverage level values: [10, 15, 20, 50, 100] . It's important to note that if coverage level values are provided through multiple methods as described above, the application will prioritize them in the following order: Values specified in the user's request Values included in the .env file Default coverage level values Furthermore, it's worth considering that the more coverage levels provided, the longer it will take for the report pages to load. Endpoint Protection Using OIDC Authentication Chanjo2 supports authenticated requests via OIDC. This functionality has been tested with Keycloak but should also work with Google authentication. To enforce authentication for the /report, /overview, /gene_overview, /mane_overview and all /coverage endpoints, uncomment and customize the following parameter. ## Optional OIDC login settings # JWKS_URL=https://example.com/realms/<realm-name>/protocol/openid-connect/certs # AUDIENCE=account More information about authenticated requests can be found in the following document: Authorised Requests . The last line present on this file ( DEMO=Y ) should be removed or commented out when the app is not running in development mode.","title":"Custom settings and the .env file"},{"location":"deployment/env_file/#custom-settings-and-the-env-file","text":"The demo server is connecting to a SQLite database whose temporary tables are destroyed and re-created every time the server is started. In order to connect to a permanent MYSQL database instance, you'd need to customise the settings present on the .env file.","title":"Custom settings and the .env file"},{"location":"deployment/env_file/#database-settings","text":"MYSQL_USER=dbUser MYSQL_PASSWORD=dbPassword MYSQL_DATABASE_NAME=chanjo2_test MYSQL_HOST_NAME=localhost MYSQL_PORT=3306","title":"Database settings"},{"location":"deployment/env_file/#customising-the-coverage-levels-used-to-create-coverage-reports-and-genes-overview-reports","text":"When generating coverage and genes overview reports, the metrics showcased in these documents are calculated across various coverage levels, such as 10x, 20x, and 50x. These specific coverage levels can be directly specified in queries to the /report and /overview endpoints using the completeness_thresholds parameter , which accepts a list of integers. For detailed instructions, please refer to the coverage-reports documentation . Alternatively, you can define these coverage levels in the .env file by adding the following line: REPORT_COVERAGE_LEVELS=[100,150,,..] If the REPORT_COVERAGE_LEVELS parameter is not present in the .env file and a request does not include a completeness_thresholds value, the report metrics will default to the following coverage level values: [10, 15, 20, 50, 100] . It's important to note that if coverage level values are provided through multiple methods as described above, the application will prioritize them in the following order: Values specified in the user's request Values included in the .env file Default coverage level values Furthermore, it's worth considering that the more coverage levels provided, the longer it will take for the report pages to load.","title":"Customising the coverage levels used to create coverage reports and genes overview reports"},{"location":"deployment/env_file/#endpoint-protection-using-oidc-authentication","text":"Chanjo2 supports authenticated requests via OIDC. This functionality has been tested with Keycloak but should also work with Google authentication. To enforce authentication for the /report, /overview, /gene_overview, /mane_overview and all /coverage endpoints, uncomment and customize the following parameter. ## Optional OIDC login settings # JWKS_URL=https://example.com/realms/<realm-name>/protocol/openid-connect/certs # AUDIENCE=account More information about authenticated requests can be found in the following document: Authorised Requests . The last line present on this file ( DEMO=Y ) should be removed or commented out when the app is not running in development mode.","title":"Endpoint Protection Using OIDC Authentication"},{"location":"deployment/installation/","text":"Installing Chanjo2 in a virtual environment Installing the application on a local Conda environment Given a conda environment containing Rust , Python >=3.8 with poetry installed, clone the repository from GitHub with the following command: git clone https://github.com/Clinical-Genomics/chanjo2.git The command will create a folder named chanjo2 in your current working directory. Move inside this directory: cd chanjo2 And install the software with poetry: poetry install If you encounter any difficulties installing the pyd4 library due to its lack of support for PEP 517 builds, simply retry the aforementioned step using a version of poetry that is less than 1.8. You can run a demo instance of the web server by typing: uvicorn src.chanjo2.main:app --reload The server will run on localhost and default port 8000 (http://0.0.0.0:8000) The demo server is connecting to a SQLite database whose temporary tables are destroyed and re-created every time the server is started. In order to connect to a permanent MYSQL database instance, you'd need to customise the settings present on the .env file. For info about custom settings on the .env file, please visit this document .","title":"Installation on a virtual environment"},{"location":"deployment/installation/#installing-chanjo2-in-a-virtual-environment","text":"","title":"Installing Chanjo2 in a virtual environment"},{"location":"deployment/installation/#installing-the-application-on-a-local-conda-environment","text":"Given a conda environment containing Rust , Python >=3.8 with poetry installed, clone the repository from GitHub with the following command: git clone https://github.com/Clinical-Genomics/chanjo2.git The command will create a folder named chanjo2 in your current working directory. Move inside this directory: cd chanjo2 And install the software with poetry: poetry install If you encounter any difficulties installing the pyd4 library due to its lack of support for PEP 517 builds, simply retry the aforementioned step using a version of poetry that is less than 1.8. You can run a demo instance of the web server by typing: uvicorn src.chanjo2.main:app --reload The server will run on localhost and default port 8000 (http://0.0.0.0:8000) The demo server is connecting to a SQLite database whose temporary tables are destroyed and re-created every time the server is started. In order to connect to a permanent MYSQL database instance, you'd need to customise the settings present on the .env file. For info about custom settings on the .env file, please visit this document .","title":"Installing the application on a local Conda environment"},{"location":"usage/authorised_requests/","text":"Enforcing OIDC Authentication in Requests By default, Chanjo2 endpoints are open to unauthenticated access. To enforce OIDC (OpenID Connect) authentication, you can configure your .env file by uncommenting and updating the following lines: ## Optional OIDC login settings # JWKS_URL=https://example.com/realms/<realm-name>/protocol/openid-connect/certs # AUDIENCE=account \u2705 JWKS_URL should point to your OIDC provider\u2019s JSON Web Key Set (JWKS). \u2705 AUDIENCE must match the aud claim in the access token issued by your provider. Provider-specific JWKS URLs Provider Example JWKS URL Google https://www.googleapis.com/oauth2/v3/certs Auth0 https://<your-domain>/.well-known/jwks.json Keycloak https://example.com/realms/<realm-name>/protocol/openid-connect/certs What is AUDIENCE ? The AUDIENCE setting tells your server what client/app the token is intended for. For Keycloak , it's typically the client ID. For Google , it's your OAuth2 client ID. For Auth0 , it's the API identifier you configured. Protected Endpoints Once the .env file is configured with valid JWKS_URL and AUDIENCE , the following endpoints will require an access token: Endpoint Token Method(s) /report Form field, Cookie /overview Form field, Cookie /gene_overview Form field, Cookie /mane_overview Form field, Cookie /coverage/d4/interval/ Authorization header /coverage/d4/interval_file/ Authorization header /coverage/d4/genes/summary Authorization header /coverage/samples/predicted_sex Authorization header If no token is provided, or the token is invalid or expired, the server will return HTTP 401 Unauthorized . Providing the access_token in Requests There are three supported methods for including the access token in a request: 1. \u2705 As a Form Field curl example: curl -X POST https://your-chanjo2-url/report \\ -d \"other_form_field\" \\ -d \"access_token=eyJhbGciOi...\" \\ -H \"Content-Type: application/x-www-form-urlencoded\" 2. \u2705 As a Cookie curl example: curl https://your-chanjo2-url/overview \\ --cookie \"access_token=eyJhbGciOi...\" 3. \u2705 As an Authorization Header Standard for APIs and OAuth2-based integrations. curl example: curl https://your-chanjo2-url/gene_overview \\ -H \"Authorization: Bearer eyJhbGciOi...\" Let us know if you run into issues or want to validate token claims manually.","title":"Authorised requests"},{"location":"usage/authorised_requests/#enforcing-oidc-authentication-in-requests","text":"By default, Chanjo2 endpoints are open to unauthenticated access. To enforce OIDC (OpenID Connect) authentication, you can configure your .env file by uncommenting and updating the following lines: ## Optional OIDC login settings # JWKS_URL=https://example.com/realms/<realm-name>/protocol/openid-connect/certs # AUDIENCE=account \u2705 JWKS_URL should point to your OIDC provider\u2019s JSON Web Key Set (JWKS). \u2705 AUDIENCE must match the aud claim in the access token issued by your provider.","title":"Enforcing OIDC Authentication in Requests"},{"location":"usage/authorised_requests/#provider-specific-jwks-urls","text":"Provider Example JWKS URL Google https://www.googleapis.com/oauth2/v3/certs Auth0 https://<your-domain>/.well-known/jwks.json Keycloak https://example.com/realms/<realm-name>/protocol/openid-connect/certs","title":"Provider-specific JWKS URLs"},{"location":"usage/authorised_requests/#what-is-audience","text":"The AUDIENCE setting tells your server what client/app the token is intended for. For Keycloak , it's typically the client ID. For Google , it's your OAuth2 client ID. For Auth0 , it's the API identifier you configured.","title":"What is AUDIENCE?"},{"location":"usage/authorised_requests/#protected-endpoints","text":"Once the .env file is configured with valid JWKS_URL and AUDIENCE , the following endpoints will require an access token: Endpoint Token Method(s) /report Form field, Cookie /overview Form field, Cookie /gene_overview Form field, Cookie /mane_overview Form field, Cookie /coverage/d4/interval/ Authorization header /coverage/d4/interval_file/ Authorization header /coverage/d4/genes/summary Authorization header /coverage/samples/predicted_sex Authorization header If no token is provided, or the token is invalid or expired, the server will return HTTP 401 Unauthorized .","title":"Protected Endpoints"},{"location":"usage/authorised_requests/#providing-the-access_token-in-requests","text":"There are three supported methods for including the access token in a request:","title":"Providing the access_token in Requests"},{"location":"usage/authorised_requests/#1-as-a-form-field","text":"curl example: curl -X POST https://your-chanjo2-url/report \\ -d \"other_form_field\" \\ -d \"access_token=eyJhbGciOi...\" \\ -H \"Content-Type: application/x-www-form-urlencoded\"","title":"1. \u2705 As a Form Field"},{"location":"usage/authorised_requests/#2-as-a-cookie","text":"curl example: curl https://your-chanjo2-url/overview \\ --cookie \"access_token=eyJhbGciOi...\"","title":"2. \u2705 As a Cookie"},{"location":"usage/authorised_requests/#3-as-an-authorization-header","text":"Standard for APIs and OAuth2-based integrations. curl example: curl https://your-chanjo2-url/gene_overview \\ -H \"Authorization: Bearer eyJhbGciOi...\" Let us know if you run into issues or want to validate token claims manually.","title":"3. \u2705 As an Authorization Header"},{"location":"usage/coverage-reports/","text":"Creating a coverage report for one or more samples based on a list of genes An example of this report is shown by the demo report endpoint: http://0.0.0.0:8000/report/demo (requires all genes and gene transcripts in build GRCh37 loaded into the database). The statistics from the report above are computed using the transcripts intervals present in the provided genes. Given an application running in production settings, with genes, transcripts and exons loaded into the database, a coverage report like the one above can be created taking into account one of these types of intervals from any gene of choice. The gene list might be provided as a list of Ensembl gene IDs, HGNC gene IDs or HGNC gene symbols . Here is what the request data of a POST request to the /report endpoint looks like: { \"build\": \"GRCh37\", \"completeness_thresholds\": [ 10, 15, 20, 50, 100 ], \"ensembl_gene_ids\": [], \"hgnc_gene_ids\": [], \"hgnc_gene_symbols\": [], \"interval_type\": \"genes\", \"default_level\": 10, \"panel_name\": \"Custom panel\", \"case_display_name\": \"internal_id\", \"samples\": [ { \"name\": \"string\", \"coverage_file_path\": \"string\", \"case_name\": \"string\", \"analysis_date\": \"2023-10-04T08:22:06.980106\" } ] } Mandatory parameters build either \"GRCh37\" or \"GRCh38\" ensembl_gene_ids OR hgnc_gene_ids OR hgnc_gene_symbols either a list of strings (for Ensembl IDs or HGNC symbols or a list of integers for HGNC IDs interval_type either \"genes\", \"transcripts\" or \"exons\", depending on the analysis type (WGS, WES, WTS) default_level default coverage threshold level to take into account for displaying the number of fully covered or partially covered intervals samples mandatory parameters are name and either coverage_file_path or case_name Optional parameters completeness_thresholds the list of different coverage thresholds that will be used to calculate gene coverage completeness. If not provided, the default threshold values will be: 10, 15, 20, 50, 100 panel_name Add a name only if the provided genes are part of a gene panel case_display_name provide this string parameter if the case belong to the same case / group samples analysis_date if not provided with be set to current date Creating a genes coverage overview report to show incompletely covered genomic intervals This type of report contains stats from incompletely covered genomic intervals at different coverage thresholds and is basically the same as the genes overview report provided by chanjo-report . A demo genes overview report based on genes transcripts from the demo PanelApp genes is available at the demo overview endpoint: http://0.0.0.0:8000/overview/demo (requires all genes and gene transcripts in build GRCh37 loaded into the database). To create a custom genes coverage overview report, send a POST request to the /overview endpoint containing the same request data described above for the /report endpoint. Creating coverage overview over MANE transcripts for a list of genes This report contains statistics over all MANE Select and Mane Plus Clinical transcripts for a list of genes provided by the user. The /mane_overview endpoint accepts POST request with the same data described for the 2 reports above. Note that MANE overview reports are available only for analyses run with genome build GRCh38 .","title":"Coverage and genes overview reports"},{"location":"usage/coverage-reports/#creating-a-coverage-report-for-one-or-more-samples-based-on-a-list-of-genes","text":"An example of this report is shown by the demo report endpoint: http://0.0.0.0:8000/report/demo (requires all genes and gene transcripts in build GRCh37 loaded into the database). The statistics from the report above are computed using the transcripts intervals present in the provided genes. Given an application running in production settings, with genes, transcripts and exons loaded into the database, a coverage report like the one above can be created taking into account one of these types of intervals from any gene of choice. The gene list might be provided as a list of Ensembl gene IDs, HGNC gene IDs or HGNC gene symbols . Here is what the request data of a POST request to the /report endpoint looks like: { \"build\": \"GRCh37\", \"completeness_thresholds\": [ 10, 15, 20, 50, 100 ], \"ensembl_gene_ids\": [], \"hgnc_gene_ids\": [], \"hgnc_gene_symbols\": [], \"interval_type\": \"genes\", \"default_level\": 10, \"panel_name\": \"Custom panel\", \"case_display_name\": \"internal_id\", \"samples\": [ { \"name\": \"string\", \"coverage_file_path\": \"string\", \"case_name\": \"string\", \"analysis_date\": \"2023-10-04T08:22:06.980106\" } ] }","title":"Creating a coverage report for one or more samples based on a list of genes"},{"location":"usage/coverage-reports/#mandatory-parameters","text":"build either \"GRCh37\" or \"GRCh38\" ensembl_gene_ids OR hgnc_gene_ids OR hgnc_gene_symbols either a list of strings (for Ensembl IDs or HGNC symbols or a list of integers for HGNC IDs interval_type either \"genes\", \"transcripts\" or \"exons\", depending on the analysis type (WGS, WES, WTS) default_level default coverage threshold level to take into account for displaying the number of fully covered or partially covered intervals samples mandatory parameters are name and either coverage_file_path or case_name","title":"Mandatory parameters"},{"location":"usage/coverage-reports/#optional-parameters","text":"completeness_thresholds the list of different coverage thresholds that will be used to calculate gene coverage completeness. If not provided, the default threshold values will be: 10, 15, 20, 50, 100 panel_name Add a name only if the provided genes are part of a gene panel case_display_name provide this string parameter if the case belong to the same case / group samples analysis_date if not provided with be set to current date","title":"Optional parameters"},{"location":"usage/coverage-reports/#creating-a-genes-coverage-overview-report-to-show-incompletely-covered-genomic-intervals","text":"This type of report contains stats from incompletely covered genomic intervals at different coverage thresholds and is basically the same as the genes overview report provided by chanjo-report . A demo genes overview report based on genes transcripts from the demo PanelApp genes is available at the demo overview endpoint: http://0.0.0.0:8000/overview/demo (requires all genes and gene transcripts in build GRCh37 loaded into the database). To create a custom genes coverage overview report, send a POST request to the /overview endpoint containing the same request data described above for the /report endpoint.","title":"Creating a genes coverage overview report to show incompletely covered genomic intervals"},{"location":"usage/coverage-reports/#creating-coverage-overview-over-mane-transcripts-for-a-list-of-genes","text":"This report contains statistics over all MANE Select and Mane Plus Clinical transcripts for a list of genes provided by the user. The /mane_overview endpoint accepts POST request with the same data described for the 2 reports above. Note that MANE overview reports are available only for analyses run with genome build GRCh38 .","title":"Creating coverage overview over MANE transcripts for a list of genes"},{"location":"usage/loading-intervals/","text":"Loading genetic intervals: genes, transcripts and exons into the database Genes, transcripts and exons should be loaded and updated at regular intervals of time. Depending on the type of sequencing data analysed using chanjo2, loading of transcripts and exons might not be required. For instance, gene coordinates should be enough for whole genome sequencing (WGS) experiments, while transcripts and exons data are necessary to return statistics from transcripts and exons-based experiments. Genes, transcripts and exons should pre pre-downloaded from the Ensembl Biomart using the Schug library and loaded into the database in three distinct tables. Genes should be loaded into the database before transcripts and exons intervals. Downloading Resources from the Schug Instance at SciLifeLab Downloading Genes curl -X 'GET' 'https://schug.scilifelab.se/genes/ensembl_genes/?build=38' > genes_GRCh38.txt Downloading Transcripts curl -X 'GET' 'https://schug.scilifelab.se/transcripts/ensembl_transcripts/?build=38' > transcripts_GRCh38.txt Downloading Exons curl -X 'GET' 'https://schug.scilifelab.se/exons/ensembl_exons/?build=38' > exons_GRCh38.txt To download genes, transcripts, and exons for genome build 37 (GRCh37), simply replace \"38\" with \"37\" in the commands above. Note: Biomart downloads may occasionally time out, resulting in incomplete files. To ensure the integrity of your downloaded data, always check that the last lines of the file contain data for the MT chromosome, as it is the final chromosome retrieved from Biomart. Loading/Updating Genes in the Database FastAPI provides a user-friendly Swagger UI that simplifies various tasks, including loading genes, transcripts, and exons into the database. If you have a local instance of Chanjo2 running, and Swagger UI is accessible in your browser at http://localhost:8000/docs , you can load genes for a specific genome build using the /intervals/load/genes/{<genome-build>} endpoint: The required parameters are: - Genome build (e.g., 37 or 38) - file_path : The path to the genes resource file on your system The expected server response is: \"Genes will be updated in the background. Please check their availability in a few minutes.\" Important: Loading genes into the database will overwrite any existing transcripts and exons associated with the same genome build. This ensures that the transcript and exon intervals remain consistent with the newly loaded gene definitions. Loading/Updating Transcripts Similarly, transcript data can be updated using the /intervals/load/transcripts/{<genome-build>} endpoint: Loading/Updating Exons Exon data can be loaded in the same way by providing the genome build and the path to the resource file using the /intervals/load/exons/{<genome-build>} endpoint. Genes, transcripts and exons queries Once the database is populated with genomic intervals data, it is possible to run queries to retrieve its content. Genomic intervals can be queried using genes definitions. Genes can be provided as a parameter to the query in the following formats Ensembl gene IDs (use parameter ensembl_ids ) HGNC ids (use parameter hgnc_ids ) HGNC symbols (use parameter hgnc_symbols ) Genome build is always a required parameter in these queries. Examples: Send a POST request to Retrieve information on a list of genes using HGNC symbols: { \"build\": \"GRCh37\", \"hgnc_symbols\": [\"LAMA1\",\"LAMA2\"] } Retrieve transcripts available for one of more genes described by Ensembl IDs: curl -X 'POST' \\ 'http://localhost:8000/intervals/transcripts' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"build\": \"GRCh37\", \"ensembl_gene_ids\": [ \"ENSG00000101680\", \"ENSG00000196569\" ] }' Retrieve all exons for genes with HGNC IDs: 6481 and 6482: curl -X 'POST' \\ 'http://localhost:8000/intervals/exons' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"build\": \"GRCh37\", \"hgnc_ids\": [ 6481, 6482 ] }' Whenever ensembl_ids, hgnc_ids, hgnc_symbols parameter is not provided, these endpoints will return a list of 100 default genes, transcripts or exons. To increase the number of returned entries you can specify a custom value for the query limit parameter.","title":"Loading and displaying genes, transcripts and exons"},{"location":"usage/loading-intervals/#loading-genetic-intervals-genes-transcripts-and-exons-into-the-database","text":"Genes, transcripts and exons should be loaded and updated at regular intervals of time. Depending on the type of sequencing data analysed using chanjo2, loading of transcripts and exons might not be required. For instance, gene coordinates should be enough for whole genome sequencing (WGS) experiments, while transcripts and exons data are necessary to return statistics from transcripts and exons-based experiments. Genes, transcripts and exons should pre pre-downloaded from the Ensembl Biomart using the Schug library and loaded into the database in three distinct tables. Genes should be loaded into the database before transcripts and exons intervals.","title":"Loading genetic intervals: genes, transcripts and exons into the database"},{"location":"usage/loading-intervals/#downloading-resources-from-the-schug-instance-at-scilifelab","text":"","title":"Downloading Resources from the Schug Instance at SciLifeLab"},{"location":"usage/loading-intervals/#downloading-genes","text":"curl -X 'GET' 'https://schug.scilifelab.se/genes/ensembl_genes/?build=38' > genes_GRCh38.txt","title":"Downloading Genes"},{"location":"usage/loading-intervals/#downloading-transcripts","text":"curl -X 'GET' 'https://schug.scilifelab.se/transcripts/ensembl_transcripts/?build=38' > transcripts_GRCh38.txt","title":"Downloading Transcripts"},{"location":"usage/loading-intervals/#downloading-exons","text":"curl -X 'GET' 'https://schug.scilifelab.se/exons/ensembl_exons/?build=38' > exons_GRCh38.txt To download genes, transcripts, and exons for genome build 37 (GRCh37), simply replace \"38\" with \"37\" in the commands above. Note: Biomart downloads may occasionally time out, resulting in incomplete files. To ensure the integrity of your downloaded data, always check that the last lines of the file contain data for the MT chromosome, as it is the final chromosome retrieved from Biomart.","title":"Downloading Exons"},{"location":"usage/loading-intervals/#loadingupdating-genes-in-the-database","text":"FastAPI provides a user-friendly Swagger UI that simplifies various tasks, including loading genes, transcripts, and exons into the database. If you have a local instance of Chanjo2 running, and Swagger UI is accessible in your browser at http://localhost:8000/docs , you can load genes for a specific genome build using the /intervals/load/genes/{<genome-build>} endpoint: The required parameters are: - Genome build (e.g., 37 or 38) - file_path : The path to the genes resource file on your system The expected server response is: \"Genes will be updated in the background. Please check their availability in a few minutes.\" Important: Loading genes into the database will overwrite any existing transcripts and exons associated with the same genome build. This ensures that the transcript and exon intervals remain consistent with the newly loaded gene definitions.","title":"Loading/Updating Genes in the Database"},{"location":"usage/loading-intervals/#loadingupdating-transcripts","text":"Similarly, transcript data can be updated using the /intervals/load/transcripts/{<genome-build>} endpoint:","title":"Loading/Updating Transcripts"},{"location":"usage/loading-intervals/#loadingupdating-exons","text":"Exon data can be loaded in the same way by providing the genome build and the path to the resource file using the /intervals/load/exons/{<genome-build>} endpoint.","title":"Loading/Updating Exons"},{"location":"usage/loading-intervals/#genes-transcripts-and-exons-queries","text":"Once the database is populated with genomic intervals data, it is possible to run queries to retrieve its content. Genomic intervals can be queried using genes definitions. Genes can be provided as a parameter to the query in the following formats Ensembl gene IDs (use parameter ensembl_ids ) HGNC ids (use parameter hgnc_ids ) HGNC symbols (use parameter hgnc_symbols ) Genome build is always a required parameter in these queries. Examples: Send a POST request to Retrieve information on a list of genes using HGNC symbols: { \"build\": \"GRCh37\", \"hgnc_symbols\": [\"LAMA1\",\"LAMA2\"] } Retrieve transcripts available for one of more genes described by Ensembl IDs: curl -X 'POST' \\ 'http://localhost:8000/intervals/transcripts' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"build\": \"GRCh37\", \"ensembl_gene_ids\": [ \"ENSG00000101680\", \"ENSG00000196569\" ] }' Retrieve all exons for genes with HGNC IDs: 6481 and 6482: curl -X 'POST' \\ 'http://localhost:8000/intervals/exons' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"build\": \"GRCh37\", \"hgnc_ids\": [ 6481, 6482 ] }' Whenever ensembl_ids, hgnc_ids, hgnc_symbols parameter is not provided, these endpoints will return a list of 100 default genes, transcripts or exons. To increase the number of returned entries you can specify a custom value for the query limit parameter.","title":"Genes, transcripts and exons queries"},{"location":"usage/sample-coverage/","text":"Coverage queries on d4 files or data contained in the database Chanjo2 can be used to quickly access average coverage depth statistics for an interval from a list of genomic intervals on a custom d4 coverage file. Coverage completeness When querying the server for sample coverage statistics, it is also possible to specify a custom list of numbers (example 30, 20, 10) representing the coverage thresholds that should be used to calculate the coverage completeness for each genomic interval. This number describes the percentage of bases (as a decimal number) meeting the user-defined coverage threshold for each genomic interval. Please note that computing coverage completeness for non-local files (files provided as URLs) is not supported. This is because the functionality is not present in d4tools. Direct coverage query over a single genomic interval Coverage and coverage completeness over a genomic interval can be computed by sending a POST request to the /coverage/d4/interval/ endpoint. The entrypoint accepts a json query with the following parameters: coverage_file_path # (required). Path to a d4 file that is stored on the local drive or on a remote server (slower computation) chromosome # (required). Genomic interval chromosome completeness_thresholds # Threshold values for computing coverage completeness. Example [50, 30, 10] start # Genomic interval start position stop # Genomic interval end position Note that start and stop coordinates are not required and whenever they are omitted coverage statistics will be computer over the entire chromosome. Query example: curl -X 'POST' \\ 'http://localhost:8000/coverage/d4/interval/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"coverage_file_path\": \"<path-to-d4-file.d4>\", \"chromosome\": \"7\", \"start\": 124822386, \"end\": 124929983, \"completeness_thresholds\": [ 10,20,30 ] }' This query wll return a response, where the mean coverage over the single interval is present under the mean_coverage key. Coverage completeness values will be additionally returned if the query sent to the server contains values for the completeness_thresholds key. A response from the server to the query above will return for instance a mean interval coverage of 27.2 and coverage completeness of 99.6%, 85% and 33.4% using threshold values of respectively 10, 20 and 30. { \"mean_coverage\": 27.19804455514559, \"completeness\": { \"10\": 1, \"20\": 0.85, \"30\": 0.33 }, \"interval_id\": null, \"interval_type\": null } Direct coverage query over the intervals present in a bed file Mean coverage can be also calculated for a list of intervals using the /coverage/d4/interval_file endpoint. The intervals list should be provided as the path to a bed-formatted file. The entrypoint accepts a json query with the following parameters: coverage_file_path # (required). Path to a d4 file that is stored on the local drive or on a remote server (slower computation) intervals_bed_path # (required). Path to a .bed file present on the local drive. completeness_thresholds # Threshold values for computing coverage completeness. Example [50, 30, 10] If we were to use the demo bed file provided in this repository, the query would look like this: curl -X 'POST' \\ 'http://localhost:8000/coverage/d4/interval_file/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"coverage_file_path\": \"<path-to-d4-file.d4>\", \"intervals_bed_path\": \"<path-to-109_green.bed>\", \"completeness_thresholds\": [ 10,20,30 ] }' And it would return the following result: [ { \"mean_coverage\": 22.17115629570222, \"completeness\": { \"10\": 1, \"20\": 0.69, \"30\": 0.08 }, \"interval_id\": null, \"interval_type\": null }, { \"mean_coverage\": 83.1338549817423, \"completeness\": { \"10\": 1, \"20\": 0.84, \"30\": 0.24 }, \"interval_id\": null, \"interval_type\": null }, { \"mean_coverage\": 252.63072816253893, \"completeness\": { \"10\": 1, \"20\": 0.78, \"30\": 0.03 }, \"interval_id\": null, \"interval_type\": null }, { \"mean_coverage\": 141.35853114545165, \"completeness\": { \"10\": 0.99, \"20\": 0.7, \"30\": 0.09 }, \"interval_id\": null, \"interval_type\": null } ] Condensed summary stats for one or more samples over a list of HGNC IDs To obtain condensed statistics for one or more samples, use the /coverage/d4/genes/summary endpoint. Send a request with a list of HGNC gene IDs, the path to the d4 files for the samples, and the coverage threshold for computing coverage completeness. The endpoint will return the average coverage and coverage completeness for all the genes included in the query. You need to provide a parameter interval_type to specify whether the statistics should be computed over entire genes, gene transcripts, or exons. Request example: curl -X 'POST' \\ 'https://chanjo2-stage.scilifelab.se/coverage/d4/genes/summary' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"build\": \"GRCh37\", \"samples\": [ { \"name\": \"TestSample\", \"coverage_file_path\": \"<path-to-d4-file.d4>\" } ], \"hgnc_gene_ids\": [ 2861, 3791, 6481, 7436, 30521 ], \"coverage_threshold\": 10, \"interval_type\": \"genes\" }' Response from chanjo2: {\"TestSample\":{\"mean_coverage\":54.38,\"coverage_completeness_percent\":33.03}}","title":"Coverage and coverage completeness queries"},{"location":"usage/sample-coverage/#coverage-queries-on-d4-files-or-data-contained-in-the-database","text":"Chanjo2 can be used to quickly access average coverage depth statistics for an interval from a list of genomic intervals on a custom d4 coverage file.","title":"Coverage queries on d4 files or data contained in the database"},{"location":"usage/sample-coverage/#coverage-completeness","text":"When querying the server for sample coverage statistics, it is also possible to specify a custom list of numbers (example 30, 20, 10) representing the coverage thresholds that should be used to calculate the coverage completeness for each genomic interval. This number describes the percentage of bases (as a decimal number) meeting the user-defined coverage threshold for each genomic interval. Please note that computing coverage completeness for non-local files (files provided as URLs) is not supported. This is because the functionality is not present in d4tools.","title":"Coverage completeness"},{"location":"usage/sample-coverage/#direct-coverage-query-over-a-single-genomic-interval","text":"Coverage and coverage completeness over a genomic interval can be computed by sending a POST request to the /coverage/d4/interval/ endpoint. The entrypoint accepts a json query with the following parameters: coverage_file_path # (required). Path to a d4 file that is stored on the local drive or on a remote server (slower computation) chromosome # (required). Genomic interval chromosome completeness_thresholds # Threshold values for computing coverage completeness. Example [50, 30, 10] start # Genomic interval start position stop # Genomic interval end position Note that start and stop coordinates are not required and whenever they are omitted coverage statistics will be computer over the entire chromosome. Query example: curl -X 'POST' \\ 'http://localhost:8000/coverage/d4/interval/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"coverage_file_path\": \"<path-to-d4-file.d4>\", \"chromosome\": \"7\", \"start\": 124822386, \"end\": 124929983, \"completeness_thresholds\": [ 10,20,30 ] }' This query wll return a response, where the mean coverage over the single interval is present under the mean_coverage key. Coverage completeness values will be additionally returned if the query sent to the server contains values for the completeness_thresholds key. A response from the server to the query above will return for instance a mean interval coverage of 27.2 and coverage completeness of 99.6%, 85% and 33.4% using threshold values of respectively 10, 20 and 30. { \"mean_coverage\": 27.19804455514559, \"completeness\": { \"10\": 1, \"20\": 0.85, \"30\": 0.33 }, \"interval_id\": null, \"interval_type\": null }","title":"Direct coverage query over a single genomic interval"},{"location":"usage/sample-coverage/#direct-coverage-query-over-the-intervals-present-in-a-bed-file","text":"Mean coverage can be also calculated for a list of intervals using the /coverage/d4/interval_file endpoint. The intervals list should be provided as the path to a bed-formatted file. The entrypoint accepts a json query with the following parameters: coverage_file_path # (required). Path to a d4 file that is stored on the local drive or on a remote server (slower computation) intervals_bed_path # (required). Path to a .bed file present on the local drive. completeness_thresholds # Threshold values for computing coverage completeness. Example [50, 30, 10] If we were to use the demo bed file provided in this repository, the query would look like this: curl -X 'POST' \\ 'http://localhost:8000/coverage/d4/interval_file/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"coverage_file_path\": \"<path-to-d4-file.d4>\", \"intervals_bed_path\": \"<path-to-109_green.bed>\", \"completeness_thresholds\": [ 10,20,30 ] }' And it would return the following result: [ { \"mean_coverage\": 22.17115629570222, \"completeness\": { \"10\": 1, \"20\": 0.69, \"30\": 0.08 }, \"interval_id\": null, \"interval_type\": null }, { \"mean_coverage\": 83.1338549817423, \"completeness\": { \"10\": 1, \"20\": 0.84, \"30\": 0.24 }, \"interval_id\": null, \"interval_type\": null }, { \"mean_coverage\": 252.63072816253893, \"completeness\": { \"10\": 1, \"20\": 0.78, \"30\": 0.03 }, \"interval_id\": null, \"interval_type\": null }, { \"mean_coverage\": 141.35853114545165, \"completeness\": { \"10\": 0.99, \"20\": 0.7, \"30\": 0.09 }, \"interval_id\": null, \"interval_type\": null } ]","title":"Direct coverage query over the intervals present in a bed file"},{"location":"usage/sample-coverage/#condensed-summary-stats-for-one-or-more-samples-over-a-list-of-hgnc-ids","text":"To obtain condensed statistics for one or more samples, use the /coverage/d4/genes/summary endpoint. Send a request with a list of HGNC gene IDs, the path to the d4 files for the samples, and the coverage threshold for computing coverage completeness. The endpoint will return the average coverage and coverage completeness for all the genes included in the query. You need to provide a parameter interval_type to specify whether the statistics should be computed over entire genes, gene transcripts, or exons.","title":"Condensed summary stats for one or more samples over a list of HGNC IDs"},{"location":"usage/sample-coverage/#request-example","text":"curl -X 'POST' \\ 'https://chanjo2-stage.scilifelab.se/coverage/d4/genes/summary' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"build\": \"GRCh37\", \"samples\": [ { \"name\": \"TestSample\", \"coverage_file_path\": \"<path-to-d4-file.d4>\" } ], \"hgnc_gene_ids\": [ 2861, 3791, 6481, 7436, 30521 ], \"coverage_threshold\": 10, \"interval_type\": \"genes\" }'","title":"Request example:"},{"location":"usage/sample-coverage/#response-from-chanjo2","text":"{\"TestSample\":{\"mean_coverage\":54.38,\"coverage_completeness_percent\":33.03}}","title":"Response from chanjo2:"}]}